{"Structs/Position/Counter.html#/s:8ChessKit8PositionV7CounterV9halfMovesSivp":{"name":"halfMoves","abstract":"<p>This is the number of halfmoves since the last capture or pawn advance.</p>","parent_name":"Counter"},"Structs/Position/Counter.html#/s:8ChessKit8PositionV7CounterV9fullMovesSivp":{"name":"fullMoves","abstract":"<p>The number of the full move.</p>","parent_name":"Counter"},"Structs/Position/State.html#/s:8ChessKit8PositionV5StateV4turnAA10PieceColorOvp":{"name":"turn","abstract":"<p>Color that holds current side that should make the next move.</p>","parent_name":"State"},"Structs/Position/State.html#/s:8ChessKit8PositionV5StateV9castlingsSayAA5PieceVGvp":{"name":"castlings","abstract":"<p>Available castlings in position.</p>","parent_name":"State"},"Structs/Position/State.html#/s:8ChessKit8PositionV5StateV8enPasantAA6SquareVSgvp":{"name":"enPasant","abstract":"<p>The square where pawn may be taken by en-passant move.</p>","parent_name":"State"},"Structs/Position/State.html":{"name":"State","abstract":"<p>Position state.</p>","parent_name":"Position"},"Structs/Position/Counter.html":{"name":"Counter","abstract":"<p>Position counter.</p>","parent_name":"Position"},"Structs/Position.html#/s:8ChessKit8PositionV5boardAA5BoardVvp":{"name":"board","abstract":"<p>Board with pieces that represents current position.</p>","parent_name":"Position"},"Structs/Position.html#/s:8ChessKit8PositionV5stateAC5StateVvp":{"name":"state","abstract":"<p>Position state.</p>","parent_name":"Position"},"Structs/Position.html#/s:8ChessKit8PositionV7counterAC7CounterVvp":{"name":"counter","abstract":"<p>Position counters.</p>","parent_name":"Position"},"Structs/Piece.html#/s:8ChessKit5PieceV4kindAA0C4KindOvp":{"name":"kind","abstract":"<p>Piece kind.</p>","parent_name":"Piece"},"Structs/Piece.html#/s:8ChessKit5PieceV5colorAA0C5ColorOvp":{"name":"color","abstract":"<p>Piece color.</p>","parent_name":"Piece"},"Structs/Piece.html#/s:8ChessKit5PieceV4kind5colorAcA0C4KindO_AA0C5ColorOtcfc":{"name":"init(kind:color:)","abstract":"<p>Initializes a piece with it&rsquo;s kind and color.</p>","parent_name":"Piece"},"Structs/Piece.html#/s:8ChessKit5PieceV9characterACSgSJ_tcfc":{"name":"init(character:)","abstract":"<p>Initializes a piece with given character.</p>","parent_name":"Piece"},"Structs/Piece.html#/s:8ChessKit5PieceV11descriptionSSvp":{"name":"description","abstract":"<p>String that indicates the stored piece.</p>","parent_name":"Piece"},"Structs/Move.html#/s:8ChessKit4MoveV4fromAA6SquareVvp":{"name":"from","abstract":"<p>Square where piece goes from.</p>","parent_name":"Move"},"Structs/Move.html#/s:8ChessKit4MoveV2toAA6SquareVvp":{"name":"to","abstract":"<p>Square where piece goes to.</p>","parent_name":"Move"},"Structs/Move.html#/s:8ChessKit4MoveV9promotionAA9PieceKindOSgvp":{"name":"promotion","abstract":"<p>Indicates if move promotes pawn into piece.</p>","parent_name":"Move"},"Structs/Move.html#/s:8ChessKit4MoveV4from2to9promotionAcA6SquareV_AhA9PieceKindOSgtcfc":{"name":"init(from:to:promotion:)","abstract":"<p>Initialize move with start and end squares.</p>","parent_name":"Move"},"Structs/Move.html#/s:8ChessKit4MoveV6stringACSS_tcfc":{"name":"init(string:)","abstract":"<p>Initialize move with human readable string.</p>","parent_name":"Move"},"Structs/Move.html#/s:8ChessKit4MoveV11descriptionSSvp":{"name":"description","abstract":"<p>Converts move into human readable string format.</p>","parent_name":"Move"},"Structs/Square.html#/s:8ChessKit6SquareV4fileSivp":{"name":"file","abstract":"<p>Index of file of the square.</p>","parent_name":"Square"},"Structs/Square.html#/s:8ChessKit6SquareV4rankSivp":{"name":"rank","abstract":"<p>Index of rank of the square.</p>","parent_name":"Square"},"Structs/Square.html#/s:8ChessKit6SquareV10coordinateSSvp":{"name":"coordinate","abstract":"<p>Human readable coorsinate on the square.</p>","parent_name":"Square"},"Structs/Square.html#/s:8ChessKit6SquareV5indexACSi_tcfc":{"name":"init(index:)","abstract":"<p>Initializes <code>Square</code> with its index.</p>","parent_name":"Square"},"Structs/Square.html#/s:8ChessKit6SquareV4file4rankACSi_Sitcfc":{"name":"init(file:rank:)","abstract":"<p>Initializes <code>Square</code> with file and rank indexes.</p>","parent_name":"Square"},"Structs/Square.html#/s:8ChessKit6SquareV10coordinateACSS_tcfc":{"name":"init(coordinate:)","abstract":"<p>Initializes a square from human readable coordinate string.</p>","parent_name":"Square"},"Structs/Square.html#/s:8ChessKit6SquareV9translate4file4rankACSi_SitF":{"name":"translate(file:rank:)","abstract":"<p>Creates new square with file and rank offsets.</p>","parent_name":"Square"},"Structs/Square.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Square"},"Structs/Board.html#/s:8ChessKit5BoardVACycfc":{"name":"init()","abstract":"<p>Initializes board with empty squares.</p>","parent_name":"Board"},"Structs/Board.html#/s:8ChessKit5BoardVyAA5PieceVSgSicip":{"name":"subscript(_:)","abstract":"<p>Provides access to board squares directly by indexes.</p>","parent_name":"Board"},"Structs/Board.html#/s:8ChessKit5BoardVyAA5PieceVSgAA6SquareVcip":{"name":"subscript(_:)","abstract":"<p>Provides access to board squares via <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Square.html\">Square</a></code> object.</p>","parent_name":"Board"},"Structs/Board.html#/s:8ChessKit5BoardVyAA5PieceVSgSScip":{"name":"subscript(_:)","abstract":"<p>Provides access to board squares via human readable coordinate.</p>","parent_name":"Board"},"Structs/Board.html#/s:8ChessKit5BoardV16enumeratedPiecesSayAA6SquareV_AA5PieceVtGyF":{"name":"enumeratedPieces()","abstract":"<p>Provides a list of pieces presented on board.</p>","parent_name":"Board"},"Structs/Board.html":{"name":"Board","abstract":"<p>A class that represents a chess board with pieces.</p>"},"Structs/Square.html":{"name":"Square","abstract":"<p>Square on <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Board.html\">Board</a></code>.</p>"},"Structs/Move.html":{"name":"Move","abstract":"<p>Represents move on board.</p>"},"Structs/Piece.html":{"name":"Piece","abstract":"<p>Piece on <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Board.html\">Board</a></code> with it&rsquo;s color.</p>"},"Structs/Position.html":{"name":"Position","abstract":"<p>Game position.</p>"},"Enums/PieceKind.html#/s:8ChessKit9PieceKindO4kingyA2CmF":{"name":"king","abstract":"<p>King piece.</p>","parent_name":"PieceKind"},"Enums/PieceKind.html#/s:8ChessKit9PieceKindO5queenyA2CmF":{"name":"queen","abstract":"<p>Queen piece.</p>","parent_name":"PieceKind"},"Enums/PieceKind.html#/s:8ChessKit9PieceKindO4rookyA2CmF":{"name":"rook","abstract":"<p>Rook piece.</p>","parent_name":"PieceKind"},"Enums/PieceKind.html#/s:8ChessKit9PieceKindO6bishopyA2CmF":{"name":"bishop","abstract":"<p>Bishop piece.</p>","parent_name":"PieceKind"},"Enums/PieceKind.html#/s:8ChessKit9PieceKindO6knightyA2CmF":{"name":"knight","abstract":"<p>Knight piece.</p>","parent_name":"PieceKind"},"Enums/PieceKind.html#/s:8ChessKit9PieceKindO4pawnyA2CmF":{"name":"pawn","abstract":"<p>Pawn piece.</p>","parent_name":"PieceKind"},"Enums/PieceKind.html#/s:8ChessKit9PieceKindO11descriptionSSvp":{"name":"description","abstract":"<p>Converts itself into human readable character.</p>","parent_name":"PieceKind"},"Enums/PieceColor.html#/s:8ChessKit10PieceColorO5whiteyA2CmF":{"name":"white","abstract":"<p>White color.</p>","parent_name":"PieceColor"},"Enums/PieceColor.html#/s:8ChessKit10PieceColorO5blackyA2CmF":{"name":"black","abstract":"<p>Black color.</p>","parent_name":"PieceColor"},"Enums/PieceColor.html#/s:8ChessKit10PieceColorO10negotiatedACvp":{"name":"negotiated","abstract":"<p>Negotiates piece color.</p>","parent_name":"PieceColor"},"Enums/PieceColor.html":{"name":"PieceColor","abstract":"<p>Represents piece and side color.</p>"},"Enums/PieceKind.html":{"name":"PieceKind","abstract":"<p>Represents a piece kind regardless of it&rsquo;s color.</p>"},"Classes/SanSerialization.html#/s:8ChessKit16SanSerializationC7defaultACvpZ":{"name":"default","abstract":"<p><code>SanSerialization</code> object with default settings.</p>","parent_name":"SanSerialization"},"Classes/SanSerialization.html#/s:8ChessKit16SanSerializationC3san3for2inSSAA4MoveV_AA4GameCtF":{"name":"san(for:in:)","abstract":"<p>Serialize move to SAN string.</p>","parent_name":"SanSerialization"},"Classes/SanSerialization.html#/s:8ChessKit16SanSerializationC4move3for2inAA4MoveVSS_AA4GameCtF":{"name":"move(for:in:)","abstract":"<p>Deserialize move from given SAN string.</p>","parent_name":"SanSerialization"},"Classes/StandardRules.html#/s:8ChessKit13StandardRulesCACycfc":{"name":"init()","abstract":"<p>Initialise a new instance.</p>","parent_name":"StandardRules"},"Classes/StandardRules.html#/s:8ChessKit13StandardRulesC13movesForPiece2at2inSayAA4MoveVGAA6SquareV_AA8PositionVtF":{"name":"movesForPiece(at:in:)","abstract":"<p>Generates available moves from square in given position.</p>","parent_name":"StandardRules"},"Classes/StandardRules.html#/s:8ChessKit13StandardRulesC14coveredSquares2inSayAA6SquareVGAA8PositionV_tF":{"name":"coveredSquares(in:)","abstract":"<p>Undocumented</p>","parent_name":"StandardRules"},"Classes/Game.html#/s:8ChessKit4GameC16positionsCounterSDyAA5BoardVSiGvp":{"name":"positionsCounter","abstract":"<p>Number of occurrences of each position in game.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC12movesHistorySayAA4MoveVGvp":{"name":"movesHistory","abstract":"<p>List of moves made before current game position.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC8positionAA8PositionVvp":{"name":"position","abstract":"<p>Current game position.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC7isCheckSbvp":{"name":"isCheck","abstract":"<p>Indicates whether it&rsquo;s check in current position.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC6isMateSbvp":{"name":"isMate","abstract":"<p>Indicates whether it&rsquo;s mate in current position.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC8position5movesAcA8PositionV_SayAA4MoveVGtcfc":{"name":"init(position:moves:)","abstract":"<p>Initialize game with given position.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC10legalMovesSayAA4MoveVGvp":{"name":"legalMoves","abstract":"<p>List of legal moves in current game position.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC4make4moveySS_tF":{"name":"make(move:)","abstract":"<p>Make move.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC4make4moveyAA4MoveV_tF":{"name":"make(move:)","abstract":"<p>Make move.</p>","parent_name":"Game"},"Classes/Game.html#/s:8ChessKit4GameC8deepCopyACyF":{"name":"deepCopy()","abstract":"<p>Creates a deep copy of current game.</p>","parent_name":"Game"},"Classes/FenSerialization.html#/s:8ChessKit16FenSerializationC7defaultACvpZ":{"name":"default","abstract":"<p><code>FenSerialization</code> object with default settings.</p>","parent_name":"FenSerialization"},"Classes/FenSerialization.html#/s:8ChessKit16FenSerializationC11deserialize3fenAA8PositionVSS_tF":{"name":"deserialize(fen:)","abstract":"<p>Deserialize position from given FEN string.</p>","parent_name":"FenSerialization"},"Classes/FenSerialization.html#/s:8ChessKit16FenSerializationC9serialize8positionSSAA8PositionV_tF":{"name":"serialize(position:)","abstract":"<p>Serialize position to FEN string.</p>","parent_name":"FenSerialization"},"Classes/FenSerialization.html":{"name":"FenSerialization","abstract":"<p>FEN positions serialization and deserialization.</p>"},"Classes/Game.html":{"name":"Game","abstract":"<p>Chess game.</p>"},"Classes/StandardRules.html":{"name":"StandardRules","abstract":"<p>Standard chess move rules.</p>"},"Classes/SanSerialization.html":{"name":"SanSerialization","abstract":"<p>SAN moves serialization and deserialization.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}